package edu.upenn.recorder;

import java.io.File;
//import java.util.List;

import android.content.Intent;
import android.os.Bundle;
import android.os.Environment;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

//import org.jdom2.Document;
//import org.jdom2.Element;

import java.util.UUID;

import edu.upenn.qrf.QRFMessageGenerator;
import edu.upenn.qrf.QRFMessageParser;
import edu.upenn.qrf.comm.QRFCommBase;
import edu.upenn.recorder.R;

/**
 * 
 */
public class QRF extends QRFActivityBase implements OnClickListener 
{
	public QRFApplicationData appData = null;
	public QRFAppLinkData linkData=null;

	private TextView netstat = null;
	private EditText hostnameInput = null;
	private EditText usernameInput = null;
	private EditText passwordInput = null;
	private StringBuffer status = new StringBuffer ();
	
	private Button okButton;
	private Button checkButton;
			
  /** 
   * Called when the activity is first created. 
   */
  @Override
  public void onCreate(Bundle savedInstanceState) 
  {      
    super.onCreate(savedInstanceState);
    
    debug ("onCreate ()");    
        
    linkData=new QRFAppLinkData ();
        
    QRFAppLinkData.parser=new QRFMessageParser ();
    
    QRFAppLinkData.generator=new QRFMessageGenerator ();
    //QRFAppLinkData.generator.initID();
    
    UUID rawSession = UUID.randomUUID();
    QRFAppLinkData.session = String.valueOf(rawSession);
    
    setContentView (R.layout.start);
                     
    checkButton=(Button) findViewById(R.id.check);
    checkButton.setOnClickListener(this);
        
    okButton=(Button) findViewById(R.id.start_app);
    okButton.setOnClickListener(this);
    //okButton.setEnabled(false);
        
    netstat = (TextView) findViewById(R.id.netstat);
    hostnameInput = (EditText) findViewById(R.id.qrf_host);
    usernameInput = (EditText) findViewById(R.id.qrf_username);
    passwordInput = (EditText) findViewById(R.id.qrf_password);
        
    appData = (QRFApplicationData) this.getApplication();        
  }	
	
	/**
	 * 
	 */
	private void updateStatus (String aMessage)
	{   	 	
	  debug (aMessage);
	  
   	status.append(aMessage);
   	status.append("\n");
	 
   	if (netstat!=null) {
   		netstat.setText(status.toString());
   	}		
	}
	
  /**
   * 
   */
  @Override
  public void onClick(View arg) 
  {
    switch(arg.getId()) {
      case R.id.check:
        updateStatus ("Initializing ...");
        systemCheck ();  
        /*
        if (systemCheck ()==true) {
          okButton.setEnabled(true);       
        } 
        */  
        break;
      case R.id.start_app:
        Intent QRFMainIntent = new Intent(this, QRFMain.class);
        startActivity(QRFMainIntent);
        finish();               
        break;
    }
  }	
			
	/**
	 * 
	 */
	protected Boolean systemCheck ()
	{
		//>-------------------------------------------------------------------------
		
		updateStatus ("Mounting data directory ...");
		
		QRFAppLinkData.direct = new File(Environment.getExternalStorageDirectory() + "/QRF");
        
    debug ("Setting data directory to: " + QRFAppLinkData.direct.getAbsolutePath());
        
    if(QRFAppLinkData.direct.exists()==false) {
      debug ("Directory " + QRFAppLinkData.direct.getAbsolutePath() + " does not exist, creating ...");
        	
      if(!QRFAppLinkData.direct.mkdir()) {            	 
        updateStatus ("Error, unable to make QRF data directory");
        //disable ();
        return (false);
      } else {
        updateStatus ("Created QRF data directory");
      }
    } else {
      updateStatus ("QRF data directory exists, good");
    }
        
		//>-------------------------------------------------------------------------
        
    updateStatus ("Connecting to server ...");
    
    debug ("Setting server host to: " + hostnameInput.getText().toString());
    
    QRFAppLinkData.currentListener=this; // Make sure we set this before anything else
    QRFAppLinkData.commManager=new QRFCommBase ();
    QRFAppLinkData.commManager.setServerHost(hostnameInput.getText().toString());
    QRFAppLinkData.commManager.setServerUsername(usernameInput.getText().toString());
    QRFAppLinkData.commManager.setServerPassword(passwordInput.getText().toString());    
    if (QRFAppLinkData.commManager.clientInit ()==true) {            
      updateStatus ("Connected to broker, starting protocol ...");
      send (QRFAppLinkData.generator.createActionMessage ("init"));
    } else {
      updateStatus ("Error connecting to broker, please check your settings");
      return (false);
    }
                
    return(true);
	}

  /**
   * 
   */
	/*
  @Override	
  public Boolean processMessage(String foundSession,String foundIdentifier,QRFMessageParser aMessage) {
    debug ("processMessage ()");
      
    return (true);
  }
  */
  
  /**
   * 
   */
  @Override
  public void ready() {
    debug ("ready ()");
    
    updateStatus ("Connection established, app ready");
    
    checkButton.setEnabled(false);
    okButton.setEnabled(true);
    
    View vg = findViewById (R.layout.start);
    vg.invalidate();
    
    QRFAppLinkData.logManager=new QRFFileManager (QRFAppLinkData.session + ".csv.log");
    logHeader ();      
  }  
	
	/**
	 * 
	 * @param aMessage
	 */
	/*
	protected void processMessage (String aMessage) {		
	  debug ("processMessage ()");
		
    Document document=QRFAppLinkData.parser.loadXMLFromString(aMessage);
    
    if (document==null) {
      updateStatus ("Unable to parse XML message");
      return;
    }
      	  
    Element rootNode = document.getRootElement();
	  List list = rootNode.getChildren("msg");

    for (int i = 0; i < list.size(); i++) {
		  Element node = (Element) list.get(i);
		  
		  String foundSession = node.getChildText ("session");
		  String foundIdentifier = node.getChildText ("device_identifier");

		  debug ("session : " + node.getChildText ("session"));
		  debug ("device_identifier: "  + foundIdentifier);
		  
		  if (foundIdentifier.equals(QRFAppLinkData.session)) {
		    debug ("Message from ourselves, ignoring ...");
		  } else {
		    
		  }
	  }
      
    updateStatus ("Connection established, app ready");
      
    checkButton.setEnabled(false);
    okButton.setEnabled(true);
    
    QRFAppLinkData.logManager=new QRFFileManager (QRFAppLinkData.session + ".csv.log");
    logHeader ();
	}
	*/
}
