/**
 * So, the idea is, when the coder clicks "skip", a menu comes up.
 * 
 * The menu's options are
 * 
 * "Model wrong"
 * "Can't observe"
 * "Same student too recent"
 * "Old information"
 * "Other"
 * 
 */
package edu.upenn.recorder;

import java.io.File;
import java.io.IOException;

import android.content.Intent;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
//import android.widget.EditText;
import android.widget.TextView;
import edu.upenn.qrf.QRFMessageParser;

/** 
 * @author vvelsen
 */
public class QRFInput extends QRFActivityBase implements OnClickListener 
{	
  private MediaRecorder mediaRecorder;
  private File audioFile; 
  
  private Button startButton;
  private Button stopButton;
  
  private Button nextButton;
  private Button skipButton;
  
  private TextView studentInfo;
  private TextView notes;
  
  private Button endButton;
  
  private Integer index=0;
  
  /** 
   * Called when the activity is first created. 
   */
  @Override
  public void onCreate(Bundle savedInstanceState) 
  {
    debug ("onCreate ()");
    	
    super.onCreate(savedInstanceState);
                
    setContentView(R.layout.input);
    
    nextButton=(Button) findViewById(R.id.next_button);
    nextButton.setOnClickListener(this);    
    
    skipButton=(Button) findViewById(R.id.skip_button);
    skipButton.setOnClickListener(this);   
    
    endButton=(Button) findViewById(R.id.end_button);
    endButton.setOnClickListener(this);    
    
    startButton=(Button) findViewById(R.id.start);
    startButton.setOnClickListener(this);
    
    stopButton=(Button) findViewById(R.id.stop);
    stopButton.setOnClickListener(this);
    
    studentInfo=(TextView) findViewById(R.id.studentinfo);
    notes=(TextView) findViewById(R.id.notes);
    
    QRFAppLinkData.currentListener=this;
  }
    
  /**
   * 
   */
  public void onClick(View v) {        
    switch(v.getId()) {
      case R.id.next_button:
        logSAI ("APP","BUTTONCLICK","R.id.next_button","");
        String noteContent=notes.getText().toString();
        debug ("Logging notes text: " + noteContent);
      break;
      
      case R.id.skip_button:
        logSAI ("APP","BUTTONCLICK","R.id.skip_button","");
        QRFErrorDisplay askReason=new QRFErrorDisplay ("Why?",this);
      break;      
      
      case R.id.end_button:
        logSAI ("APP","BUTTONCLICK","R.id.end_button","");
        Intent finishIntent = new Intent(this, QRFFinish.class);
        startActivity(finishIntent);
        finish();          
      break;      
      
      case R.id.start:
        logSAI ("APP","BUTTONCLICK","R.id.start","");
        onStart();
      break;
      
      case R.id.stop:
        logSAI ("APP","BUTTONCLICK","R.id.stop","");
        onRecordingPause ();
        resetRecorder();
      break;      
    }
  } 
  
  /**
   * 
   */
  public void onStart() {                          
    if (QRFAppLinkData.direct!=null) {
      index++;
      audioFile = new File(QRFAppLinkData.direct.getAbsolutePath(),QRFAppLinkData.session+".audio."+index+".3gp");
      resetRecorder();
      mediaRecorder.start();
    }
  }

  /**
   * this process must be done prior to the start of recording
   */
  private void resetRecorder() {
    mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
    mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
    mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
    //mediaRecorder.setAudioEncodingBitRate(16);
    //mediaRecorder.setAudioSamplingRate(44100);
    mediaRecorder.setOutputFile(audioFile.getAbsolutePath());

    try {
      mediaRecorder.prepare();
    } catch (IllegalStateException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  /**
   * 
   */
  protected void onRecordingPause() {
    
    if (mediaRecorder != null) {
      mediaRecorder.stop();
      mediaRecorder.release();
      mediaRecorder = null;
    }
  }
  
  /**
   * 
   */
  /*
  @Override 
  public Boolean processMessage(String foundSession,String foundIdentifier,QRFMessageParser aMessage) {
    debug ("processMessage ()");
     
    return (true);
  }
  */
}
