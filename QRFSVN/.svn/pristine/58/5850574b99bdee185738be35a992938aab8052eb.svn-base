/**
 * So, the idea is, when the coder clicks "skip", a menu comes up.
 * 
 * The menu's options are
 * 
 * "Model wrong"
 * "Can't observe"
 * "Same student too recent"
 * "Old information"
 * "Other"
 * 
 */
package edu.upenn.recorder;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import edu.upenn.qrf.Base64;

/** 
 * @author vvelsen
 */
public class QRFFinish extends QRFActivityBase implements OnClickListener 
{	
  private Button finishButton;
  private Button classButton;
  private Button restartButton;
    
  /** 
   * Called when the activity is first created. 
   */
  @Override
  public void onCreate(Bundle savedInstanceState) 
  {
    debug ("QRFFinish:onCreate ()");
    	
    super.onCreate(savedInstanceState);
                
    setContentView(R.layout.finish);
    
    finishButton=(Button) findViewById(R.id.finish_app);
    finishButton.setOnClickListener(this);
    
    classButton=(Button) findViewById(R.id.goto_class);
    classButton.setOnClickListener(this);    
    
    restartButton=(Button) findViewById(R.id.restart);
    restartButton.setOnClickListener(this);    
                
    QRFAppLinkData.currentListener=this;
  }
    
  /**
   * 
   */
  public void onClick(View v) {
    Intent QRFInputIntent = null;
        
    switch(v.getId()) {
      case R.id.finish_app:
        logSAI ("APP","BUTTONCLICK","R.id.finish_app","");
        
        //send(QRFAppLinkData.generator.sendLogs(QRFAppLinkData.observerName));
        
        Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_HOME);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
        finish ();
      break;
      
      case R.id.goto_class:
        logSAI ("APP","BUTTONCLICK","R.id.goto_class","");        
        QRFInputIntent = new Intent(this, QRFMain.class);
        startActivity(QRFInputIntent);
        finish();         
      break;
      
      case R.id.restart:
        logSAI ("APP","BUTTONCLICK","R.id.restart","");        
        QRFInputIntent = new Intent(this, QRF.class);
        QRFAppLinkData.reset ();
        startActivity(QRFInputIntent);
        finish();         
      break;      
    }
  }
  
  /**
   * @param aPath
   * @return
   */
  public ArrayList<String> listFiles(String aPath) {
    File folder = new File(aPath);
    File[] listOfFiles = folder.listFiles();
    ArrayList<String> results = new ArrayList<String>();

    for (int i = 0; i < listOfFiles.length; i++) {
      if (listOfFiles[i].isFile()) {
        results.add(listOfFiles[i].getName());
      }
    }

    return results;
  }

  /**
   * @param files
   */
  public void debugFileList(ArrayList<String> files) {
    for (int i = 0; i < files.size(); i++) {
      debug("File [" + i + "]: " + files.get(i));
    }
  }

  /**
   * @param aFile
   * @return
   */
  public byte[] fileToByte(String aFile) {
    File file = new File(aFile);

    FileInputStream fileInputStream = null;

    byte[] b = new byte[(int) file.length()];
    try {
      fileInputStream = new FileInputStream(file);
      fileInputStream.read(b);
      /*
       * for (int i = 0; i < b.length; i++) { System.out.print((char) b[i]); }
       */
    } catch (FileNotFoundException e) {
      debug("File Not Found.");
      // e.printStackTrace();
      return (null);
    } catch (IOException e1) {
      System.out.println("Error Reading The File.");
      e1.printStackTrace();
      return (null);
    }

    try {
      fileInputStream.close();
    } catch (IOException e) {
      e.printStackTrace();
      return (null);
    }

    return b;
  }

  /**
   * @param string
   * @return
   */
  public ArrayList<String> encodeFile(String aFile) {
    ArrayList<String> parts = new ArrayList<String>();

    byte[] rawData = fileToByte(aFile);

    if (rawData == null) {
      return null;
    }

    int blockSize = 1024;

    int count = 0;
    //int index=0;

    int pieces = rawData.length / blockSize;
    int partial = rawData.length % blockSize;
    
    debug("Encoding file of raw length: " + rawData.length + " into " + pieces + " pieces and " + partial + " bytes");
          
    for (int i=0;i<pieces;i++) {
      byte[] block = new byte[blockSize];
      
      System.arraycopy(rawData, count, block, 0, blockSize);
      
      String encoded = Base64.encodeToString(block, false);
      
      parts.add(encoded);

      count+=blockSize;
    }
    
    if (partial>0) {
      byte[] block = new byte[partial];
      
      System.arraycopy(rawData, count, block, 0, partial);
      
      String encoded = Base64.encodeToString(block, false);
      
      parts.add(encoded);
    }
    
    debug ("Created " + parts.size() + " parts for this file");

    return parts;
  } 
  
  /**
   * @param parts
   * @param aFile
   * @return
   */
  public String partsToXML (ArrayList<String> parts,String aFile) {
    StringBuffer formatted=new StringBuffer ();
    
    for (int i=0;i<parts.size();i++) {
      formatted.append("<file part=\""+(i+1)+"\" of=\""+parts.size()+"\">");
      formatted.append("<name>"+aFile+"</name>");
      formatted.append("<data><![CDATA[");
      formatted.append(parts.get(i));
      formatted.append("]]></data>");
      formatted.append("</file>\n");
    }
    
    return (formatted.toString());
  } 
  
  /**
   * @param files
   */
  public void transformToXML(ArrayList<String> files, String aBasePath) {
    for (int i = 0; i < files.size(); i++) {
      ArrayList<String> fileParts = encodeFile(aBasePath + "//" + files.get(i));
      String fileInXML=partsToXML (fileParts,files.get(i));
      
      PrintWriter out=null;
      try {
        out = new PrintWriter(aBasePath + "//out//" + files.get(i)+".xml");
      } catch (FileNotFoundException e) {
        e.printStackTrace();
      }
      out.println(fileInXML);
      out.close();
    }
  }  
}
